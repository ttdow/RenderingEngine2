#version 460

layout (local_size_x = 1, local_size_y = 1) in;

layout (rgba32f, set = 0, binding = 0) uniform image2D image;

uint JenkinsHash(uint x)
{
	x += x << 10;
	x ^= x >> 6;
	x += x << 3;
	x ^= x >> 11;
	x += x << 15;

	return x;
}

uint InitRNG(uvec2 pixel, uvec2 resolution, uint frame)
{
	uint rngState = uint(dot(pixel, uvec2(1, resolution.x))) ^ JenkinsHash(frame);

	return JenkinsHash(rngState);
}

float UintToFloat(uint x)
{
	return uintBitsToFloat(0x3f800000 | (x >> 9)) - 1.0;
}

uint XorShift(inout uint rngState)
{
	rngState ^= rngState << 13;
	rngState ^= rngState >> 17;
	rngState ^= rngState << 5;

	return rngState;
}

float Rand(inout uint rngState)
{
	return UintToFloat(XorShift(rngState));
}

struct Ray
{
	vec3 origin;
	vec3 direction;
	float t;
};

struct Sphere
{
	vec3 center;
	float radius;
};

struct Camera
{
	vec3 center;
	vec3 topLeft;
	vec3 pixelX;
	vec3 pixelY;
};

bool HitSphere(Sphere sphere, inout Ray ray)
{
	vec3 oc = sphere.center - ray.origin;
	float a = dot(ray.direction, ray.direction);
	float h = dot(ray.direction, oc);
	float c = dot(oc, oc) - (sphere.radius * sphere.radius);
	float discriminant = (h * h) - (a * c);
	if (discriminant < 0)
	{
		return false;
	}

	float sqrtd = sqrt(discriminant);

	float root = (h - sqrtd) / a;
	if (root <= 0 || ray.t <= root)
	{
		root = (h + sqrtd) / a;
		if (root <= 0 || ray.t <= root)
		{
			return false;
		}
	}

	ray.t = root;

	return true;
}

void main()
{
	ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
	ivec2 resolution = imageSize(image);

	Camera camera;
	camera.center = vec3(0.0, 0.0, 0.0);

	float focalLength = 1.0;
	float viewportHeight = 2.0;
	float viewportWidth = viewportHeight * (float(resolution.x) / resolution.y);

	vec3 viewport_u = vec3(viewportWidth, 0.0, 0.0);
	vec3 viewport_v = vec3(0.0, viewportHeight, 0.0);

	vec3 pixelDelta_u = viewport_u / resolution.x;
	vec3 pixelDelta_v = viewport_v / resolution.y;

	vec3 viewportUpperLeft = camera.center - vec3(0.0, 0.0, focalLength) - (viewport_u / 2) - (viewport_v / 2);
	vec3 pixel00Location = viewportUpperLeft + 0.5 * (pixelDelta_u + pixelDelta_v);
	
	vec3 pixelCenter = pixel00Location + (pixel.x * pixelDelta_u) + (pixel.y * pixelDelta_v);

	Ray ray;
	ray.origin = camera.center;
	ray.direction = normalize(pixelCenter - camera.center);
	ray.t = 1000.0;

	Sphere sphere;
	sphere.center = vec3(0.0, 0.0, -3.0);
	sphere.radius = 1.0;

	bool hit = HitSphere(sphere, ray);

	vec3 hitPosition = ray.origin + (ray.t * ray.direction);
	vec3 N = normalize(hitPosition - sphere.center);
	vec3 L = normalize(vec3(1.0, 1.0, 1.0));

	vec3 color = vec3(0.0, 1.0, 1.0);
	if (hit)
	{
		color = vec3(1.0, 0.0, 0.0) * dot(N, L);
	}

	imageStore(image, pixel, vec4(color, 1.0));
}